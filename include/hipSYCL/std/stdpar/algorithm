/*
 * This file is part of hipSYCL, a SYCL implementation based on CUDA/HIP
 *
 * Copyright (c) 2023 Aksel Alpay
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef HIPSYCL_PSTL_ALGORITHM_HPP
#define HIPSYCL_PSTL_ALGORITHM_HPP

#include "execution"

#define par_unseq __default_par_unseq
#define parallel_unsequenced_policy __default_parallel_unsequenced_policy
#include_next <algorithm>
#undef par_unseq
#undef parallel_unsequenced_policy

#include <iterator>

#include "detail/sycl_glue.hpp"

#ifdef __clang__
#define HIPSYCL_STDPAR_INLINE __attribute__((always_inline))
#define HIPSYCL_STDPAR_ENTRYPOINT HIPSYCL_STDPAR_INLINE
#define HIPSYCL_STDPAR_NOINLINE __attribute__((noinline))
#else
#define HIPSYCL_STDPAR_INLINE
#define HIPSYCL_STDPAR_ENTRYPOINT
#define HIPSYCL_STDPAR_NOINLINE
#endif

// Compiler does not currently support handling invoke instructions for
// these calls, so mark them as noexcept (which should be fine) such
// that call instructions are generated instead.
HIPSYCL_STDPAR_NOINLINE
extern "C" void __hipsycl_stdpar_optimizable_sync(hipsycl::sycl::queue& q) noexcept {
  q.wait();
}

#ifdef __clang__
extern "C" void __hipsycl_stdpar_consume_sync() noexcept;
#else
extern "C" void __hipsycl_stdpar_consume_sync() noexcept {}
#endif

namespace hipsycl::stdpar {

template <class ForwardIt, class UnaryFunction2>
sycl::event for_each(sycl::queue &q, ForwardIt first, ForwardIt last,
                     UnaryFunction2 f) {

  return q.parallel_for(sycl::range{std::distance(first, last)},
                        [=](sycl::id<1> id) {
                          auto it = first;
                          std::advance(it, id[0]);
                          f(*it);
                        });
}

template<class ForwardIt, class Size, class UnaryFunction2>
sycl::event for_each_n(sycl::queue& q,
                    ForwardIt first, Size n, UnaryFunction2 f) {
  return q.parallel_for(sycl::range{static_cast<size_t>(n)},
                        [=](sycl::id<1> id) {
                          auto it = first;
                          std::advance(it, id[0]);
                          f(*it);
                        });
}

template <class ForwardIt1, class ForwardIt2, class UnaryOperation>
sycl::event transform(sycl::queue& q,
                     ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 d_first,
                     UnaryOperation unary_op) {
  return q.parallel_for(sycl::range{std::distance(first1, last1)},
                        [=](sycl::id<1> id) {
                          auto input = first1;
                          auto output = d_first;
                          std::advance(input, id[0]);
                          std::advance(output, id[0]);
                          *output = unary_op(*input);
                        });
}

template <class ForwardIt1, class ForwardIt2, class ForwardIt3,
          class BinaryOperation>
sycl::event transform(sycl::queue &q, ForwardIt1 first1, ForwardIt1 last1,
                      ForwardIt2 first2, ForwardIt3 d_first,
                      BinaryOperation binary_op) {
  return q.parallel_for(sycl::range{std::distance(first1, last1)},
                        [=](sycl::id<1> id) {
                          auto input1 = first1;
                          auto input2 = first2;
                          auto output = d_first;
                          std::advance(input1, id[0]);
                          std::advance(input2, id[0]);
                          std::advance(output, id[0]);
                          *output = binary_op(*input1, *input2);
                        });
}


}

namespace std {

template<class ForwardIt, class UnaryFunction2>
HIPSYCL_STDPAR_ENTRYPOINT
void for_each(std::execution::offload_parallel_unsequenced_policy,
               ForwardIt first, ForwardIt last, UnaryFunction2 f) {
  __hipsycl_stdpar_consume_sync();
  auto& q = hipsycl::stdpar::single_device_dispatch::get_queue();
  hipsycl::stdpar::for_each(q, first, last, f);
  __hipsycl_stdpar_optimizable_sync(q);
}

template<class ForwardIt, class Size, class UnaryFunction2>
HIPSYCL_STDPAR_ENTRYPOINT
ForwardIt for_each_n(std::execution::offload_parallel_unsequenced_policy,
                    ForwardIt first, Size n, UnaryFunction2 f) {
  __hipsycl_stdpar_consume_sync();
  auto& q = hipsycl::stdpar::single_device_dispatch::get_queue();
  ForwardIt last = first;
  std::advance(last, n);
  hipsycl::stdpar::for_each_n(q, first, n, f);
  __hipsycl_stdpar_optimizable_sync(q);
  return last;
}

template <class ForwardIt1, class ForwardIt2, class UnaryOperation>
HIPSYCL_STDPAR_ENTRYPOINT
ForwardIt2 transform(std::execution::offload_parallel_unsequenced_policy,
                     ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 d_first,
                     UnaryOperation unary_op) {
  __hipsycl_stdpar_consume_sync();
  auto& q = hipsycl::stdpar::single_device_dispatch::get_queue();
  auto last = d_first;
  std::advance(last, std::distance(first1, last1));
  hipsycl::stdpar::transform(q, first1, last1, d_first, unary_op);
  __hipsycl_stdpar_optimizable_sync(q);
  return last;
}

template <class ForwardIt1, class ForwardIt2, class ForwardIt3,
          class BinaryOperation>
HIPSYCL_STDPAR_ENTRYPOINT
ForwardIt3 transform(std::execution::offload_parallel_unsequenced_policy,
                     ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2,
                     ForwardIt3 d_first, BinaryOperation binary_op) {
  __hipsycl_stdpar_consume_sync();
  auto& q = hipsycl::stdpar::single_device_dispatch::get_queue();
  auto last = d_first;
  std::advance(last, std::distance(first1, last1));
  hipsycl::stdpar::transform(q, first1, last1, first2, d_first, binary_op);
  __hipsycl_stdpar_optimizable_sync(q);
  return last;
}

}

#endif
