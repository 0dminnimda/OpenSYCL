#!/usr/bin/python3

'''
 *
 * This file is part of hipSYCL, a SYCL implementation based on CUDA/HIP
 *
 * Copyright (c) 2018 Aksel Alpay
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 '''


import sys
import subprocess
import os
import tempfile
import os.path
from shutil import copyfile
import binascii
import shutil


def is_program_executable(cmd):
  try:
    subprocess.call([cmd], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    return True
  except:
    return False


def get_hipsycl_binary_path():
  return os.path.dirname(os.path.realpath(__file__))

def get_hipsycl_install_path():
  hipsyclcc_path = get_hipsycl_binary_path()
  return os.path.join(hipsyclcc_path, "..")

def is_during_hipsycl_installation():
  libpath = os.path.join(get_hipsycl_install_path(),"lib")
  return not os.path.isfile(os.path.join(libpath,"libhipSYCL.so"))

def get_hipsycl_default_options(use_bundled_hip = False):
  hipsycl_install_path = get_hipsycl_install_path()
  libpath = os.path.join(hipsycl_install_path,"lib")
  includepath = os.path.join(hipsycl_install_path,"include")

  bundled_hip_install_path = os.path.join(includepath,
                                    "hipSYCL")
  bundled_hip_preinstall_path = os.path.join(hipsycl_install_path,
                                    "contrib/HIP/include")
  # If we are compiling hipSYCL itself, the library won't exist yet.
  # In that case, cmake will take care of the paths, so
  # we only need to worry about adding the options if we
  # are part of the installed distribution, i.e. the libhipSYCL
  # library exists.
  result = []
  if not is_during_hipsycl_installation():
    result = ["-I"+includepath, "-L"+libpath, "-lhipSYCL"]
    if use_bundled_hip:
      result.append("-I"+bundled_hip_install_path)
  else:
    if use_bundled_hip:
      result.append("-I"+bundled_hip_preinstall_path)
  return result

class source_file_processor:

  def __init__(self, config, suffix):
    self._managed_files = []
    self._managed_directories = []
    self._suffix = suffix
    self._do_cleanup = not config.keep_temporaries()


  def _run_source_transformation(self, filename, output_dir, output_filename):

    source_transform_tool = os.path.join(get_hipsycl_binary_path(),"hipsycl_transform_source")
    inclusion_rewriter_tool = os.path.join(get_hipsycl_binary_path(),"hipsycl_rewrite_includes")

    if not is_during_hipsycl_installation():
      # ToDo: We must pass all compilation arguments
      # to the tools as well!

      returnvalue = subprocess.call(
        [inclusion_rewriter_tool,
         filename, "--",
         "-I"+os.path.dirname(filename),
         "-Wno-unused-command-line-argument"]
         +get_hipsycl_default_options())

      if returnvalue != 0:
        raise RuntimeError("Error while rewriting includes, aborting compilation")

      self._managed_files.append(filename+".inc.cpp")

      returnvalue = subprocess.call(
        [source_transform_tool,
         filename+".inc.cpp",
         "--",
         "-I"+os.path.dirname(filename),
         "-Wno-unused-command-line-argument",
         "--hipsycl-transform-dir="+output_dir,
         "--hipsycl-main-output-file="+output_filename]+get_hipsycl_default_options())

      if returnvalue != 0:
        raise RuntimeError("Error during source-to-source transformation, aborting compilation.")
    else:
      self._copy_file(filename, os.path.join(output_dir,output_filename))


  def process_file(self,filename):
    # We work in the file's directory itself - this
    # is more robust with regards to resolving includes.
    #working_dir = self._get_temp_directory()
    #os.makedirs(working_dir)
    #self._managed_directories.append(working_dir)
    working_dir = os.path.dirname(filename)

    output_file = self._get_random_id()+self._suffix
    self._managed_files.append(os.path.join(working_dir, output_file))

    self._run_source_transformation(os.path.abspath(filename), working_dir, output_file)

    full_output_path = os.path.join(working_dir, output_file)

    if not os.path.exists(full_output_path):
      raise RuntimeError("source-to-source transformation: Expected output file isn't present.")

    return full_output_path

  def release_files(self):
    if self._do_cleanup:
      for filename in self._managed_files:
        # ToDo: Check If file exists
        os.remove(filename)
      for dirname in self._managed_directories:
        shutil.rmtree(dirname)

  def _get_random_id(self):
    return "hipsycl_"+binascii.b2a_hex(os.urandom(8)).decode("utf-8")

  def _get_temp_directory(self):
    tempdir = tempfile.gettempdir()

    return os.path.join(tempdir, self._get_random_id())

  def _copy_file(self,filename,new_filename):
    prepend_data = "#line 1 \""+filename+"\"\n"

    with open(filename, 'r') as original:
      original_data = original.read()

    with open(new_filename, "w") as modified:
      modified.write(prepend_data + original_data)
      modified.close()



cpp_files = set([".cpp",".cxx",".c++",".cc",".c"])

class cuda_compiler:
  def __init__(self,config):
    self.device_compiler = "nvcc"
    self.config = config

    self.global_options = ["-I","-L","-l", "-D"]
    self.is_nvcc_available = is_program_executable(self.device_compiler)

    if self.is_nvcc_available:
      self.nvcc_option_output = self.get_nvcc_arguments()
    else:
      self.nvcc_option_output = ""


  def get_nvcc_arguments(self):
    return subprocess.check_output([self.device_compiler, "--help"]).decode("utf-8")


  def is_no_nvcc_argument(self,arg):
    return not arg in self.nvcc_option_output

  def is_source_file(self, arg):
    if not arg.startswith("-"):
      for ending in cpp_files:
        if arg.lower().endswith(ending):
          return True
    return False

  def is_compilation_step(self,args):
    for arg in args:
      if self.is_source_file(arg):
        return True
    return False

  def obtain_linker_arguments(self, linker_args):
    if not linker_args.startswith("-Wl,"):
      return [linker_args]
    else:
      args = linker_args.replace("-Wl,","",1).split(",")

      result = []
      for arg in args:
        result.append("-Xlinker")
        result.append(arg)
      return result


  def transform_argument(self,arg):
    if arg.startswith("-"):
      for opt in self.global_options:
        if arg.startswith(opt):
          return [arg]
        else:
          if self.is_no_nvcc_argument(arg):
            if arg.startswith("-Wl,"):
              return self.obtain_linker_arguments(arg)
            else:
              return ["-Xcompiler",arg]
    return [arg]

  def run(self, args):
    source_processor = source_file_processor(self.config, ".cu")
    result = None
    try:
      if len(args) == 1:
        return -1
      else:
        transformed_args = []
        for arg in args[1:]:
          if self.is_source_file(arg):
            transformed_args.append(source_processor.process_file(arg))
          else:
            transformed_args += self.transform_argument(arg)

        compiler_args = ["--expt-extended-lambda", "-Wno-deprecated-declarations"]
        compiler_args += get_hipsycl_default_options(use_bundled_hip = True)
        compiler_args += transformed_args

        result = subprocess.call([self.device_compiler]+compiler_args)

    finally:
      source_processor.release_files()

    return result

  def is_available(self):
    return self.is_nvcc_available

class hip_compiler:
  def __init__(self, config):
    self.device_compiler = "hcc"
    self.is_hcc_available = (is_program_executable(self.device_compiler) and
                             is_program_executable("hcc-config") and
                             is_program_executable("hipconfig"))
    self.hcc_options = []
    self.config = config

    if self.is_hcc_available:
      self.hcc_options = self._get_config()

  def run(self, args):
    if len(args) == 1:
      return -1
    else:
      source_processor = source_file_processor(self.config, ".cpp")
      result = None
      try:
        if len(args) == 1:
          return -1
        else:
          transformed_args = []
          for arg in args[1:]:
            if self.is_source_file(arg):
              transformed_args.append(source_processor.process_file(arg))
            else:
              transformed_args += arg

          compiler_args = ["-Wno-unused-command-line-argument",
                           "-Wno-ignored-attributes",
                           "-std=c++14"]+self.hcc_options
          compiler_args += get_hipsycl_default_options(use_bundled_hip = False)
          compiler_args += transformed_args

          result = subprocess.call([self.device_compiler]+compiler_args)

      finally:
        source_processor.release_files()

      return result

  def _get_config(self):
    cxxconfig = subprocess.check_output(["hcc-config","--cxxflags"]).decode("utf-8")
    ldconfig = subprocess.check_output(["hcc-config","--ldflags"]).decode("utf-8")
    rocmpath = subprocess.check_output(["hipconfig","-p"]).decode("utf-8")
    hip_lib_path = os.path.join(rocmpath, "lib")
    # ToDo: What if the hcc include/library paths in cxxconfig and ldconfig
    # contain spaces?
    return cxxconfig.split()+ldconfig.split()+["-L"+hip_lib_path,
                                               "-lhip_hcc","-lhip_device"]

  def is_available(self):
    return self.is_hcc_available

class syclcc_config:
  def __init__(self, argv):
    self._alternative_compiler = ""
    self._forwarded_args = []
    self._keep_temporaries = False

    for arg in argv:
      if arg.startswith("--force-alternative-compiler="):
        parsed_args = arg.split("=")
        if len(parsed_args) != 2:
          raise RuntimeError("Invalid argument: "+arg)

        self._alternative_compiler = parsed_args[1]
      elif arg == "--keep-temporary-files":
        self._keep_temporaries = True
      else:
        self._forwarded_args.append(arg)

  def use_alternative_compiler(self):
    return len(self._alternative_compiler) != 0

  def keep_temporaries(self):
    return self._keep_temporaries

  def get_alternative_compiler(self):
    if not self.use_alternative_compiler():
      return None
    else:
      return self._alternative_compiler

  def get_forwarded_args(self):
    return self._forwarded_args

if __name__ == '__main__':
  args = sys.argv

  if sys.version_info[0] < 3:
    print("syclcc requires python 3.")
    sys.exit(-1)

  try:
    if len(args) == 1:
      print("syclcc [hipSYCL] for amd and nvidia devices, Copyright (C) 2018 Aksel Alpay")
      print("Usage: syclcc <options>")
    else:
      config = syclcc_config(args)

      if config.use_alternative_compiler():
        sys.exit(subprocess.call([config.get_alternative_compiler()]
                                + config.get_forwarded_args()))
      else:
        hcc = hip_compiler(config)
        cuda = cuda_compiler(config)

        rocm_available = hcc.is_available()
        cuda_available = cuda.is_available()

        if not rocm_available and not cuda_available:
          print("Neither CUDA nor ROCm seem to be installed - cannot find hcc or nvcc")
          sys.exit(-1)

        selected_compiler = None
        # First check if the user has specified which compiler should
        # be used
        if "HIPSYCL_PLATFORM" in os.environ:
          envconfig = os.environ["HIPSYCL_PLATFORM"].lower()
          if envconfig == "cuda" or envconfig == "nvcc":
            if not cuda_available:
              print("CUDA was requested as hipSYCL platform via the HIPSYCL_PLATFORM "
                    "environment variable, but it is not available.")
              sys.exit(-1)
            else:
              selected_compiler = cuda
          elif envconfig == "hip" or envconfig == "rocm" or envconfig == "hcc":
            if not rocm_available:
              print("ROCm was requested as hipSYCL platform via the HIPSYCL_PLATFORM "
                    "environment variable, but it is not available.")
              sys.exit(-1)
            else:
              selected_compiler = hcc

        # If no compiler has been explicitly chosen, use the only one existing
        # or print error if several choices exist
        if selected_compiler == None:
          if rocm_available and cuda_available:
            print("Both CUDA and ROCm are available, please specify which platform "
                  "should be used by hipSYCL via the HIPSYCL_PLATFORM environment variable.")
            sys.exit(-1)
          else:
            if rocm_available:
              selected_compiler = hcc
            elif cuda_available:
              selected_compiler = cuda

        if selected_compiler == None:
          print("Could not select compiler - this is a bug")
          sys.exit(-1)

        sys.exit(selected_compiler.run(args))
  except Exception as e:
    print("syclcc fatal error: "+str(e))
    sys.exit(-1)

